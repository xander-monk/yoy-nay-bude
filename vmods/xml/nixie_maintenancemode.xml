<?xml version="1.0" encoding="UTF-8"?>
<vmod>
  <name>Nixie Maintenance Mode</name>
  <version>1.0.0</version>
  <description>Shows Nice Nixie tubes in Maintenance mode page </description>
  <author>Mirza Hadzic</author>

  <file name="includes/templates/default.catalog/pages/maintenance_mode.inc.php">

    <operation method="replace" type="multiline" onerror="warning">
      <find><![CDATA[
<style>
body {
  padding: 60px 15px;
}
#box-maintenance-mode {
  display: block;
  text-align: center;
  padding: 30px;
  border-radius: 0px 25px 0px 25px;
  background: #fff;
  box-shadow: 0px 0px 60px rgba(0,0,0,0.25);
  margin: 0 auto;
  max-width: 640px;
}
#box-maintenance-mode img {
  max-width: 250px;
  max-height: 60px;
}
</style>

<div class="fourteen-forty">
  <main id="content">
    <section id="box-maintenance-mode">
      <img src="<?php echo document::href_link('images/logotype.png'); ?>" alt="<?php echo settings::get('store_name'); ?>" title="<?php echo settings::get('store_name'); ?>" />
      <hr />
      <h1><?php echo language::translate('maintenance_mode:title', 'Maintenance Mode'); ?></h1>
      <p><?php echo language::translate('maintenance_mode:description', 'This site is currently in maintenance mode. We\'ll be back shortly.'); ?></p>
    </section>
  </main>
</div>
      ]]></find>

      <insert><![CDATA[
<style>

  body {
	 background: #000000;
	 margin: 20px;
	 font-family: 'Josefin Sans';
}

html
{
  background: #000000;
}

 .nixie-container {
	 position: relative;
	 font-family: 'Josefin Sans';
	 font-size: 10em;
	 text-align: center;
	 letter-spacing: 0.1em;
}
 .nixie-container .tube {
	 position: relative;
	 display: inline-block;
	 text-align: center;
	 width: 150px;
	 height: 240px;
	 margin: 6px;
	 border-top: 2px solid rgba(240, 200, 200, 0.12);
	 border-left: 2px solid rgba(240, 200, 200, 0.1);
	 border-right: 2px solid rgba(240, 200, 200, 0.1);
	 border-bottom: 12px solid rgba(30, 30, 30, 1);
	 border-radius: 60px 60px 8px 8px;
	 background-color: rgba(255, 110, 11, 0.02);
	 box-shadow: inset -6px 4px 30px 2px rgba(255, 110, 11, 0.1), 0 -2px 32px 0 rgba(255, 169, 22, 0.06);
	 animation-duration: 4.5s;
	 animation-name: tube-glow;
}
 .nixie-container .tube::before {
	 content: "";
	 position: absolute;
	 top: 18px;
	 right: 14px;
	 width: 46px;
	 height: 24px;
	 border-top: 10px solid rgba(255, 255, 255, 0.05);
	 border-radius: 20px;
	 transform: rotate(43deg);
}
 .nixie-container .tube::after {
	 content: "";
	 position: absolute;
	 top: 80px;
	 right: 10px;
	 width: 10px;
	 height: 150px;
	 border-right: 2px solid rgba(255, 255, 255, 0.03);
	 border-radius: 6px;
}
 .nixie-container .tube .digit {
	 position: absolute;
	 width: 170px;
	 line-height: 1.65em;
	 left: 0;
	 text-shadow: rgba(50, 50, 50, 0.05) 0 0 1px;
	 color: transparent;
	 -webkit-text-stroke-width: 3px;
	 -webkit-text-stroke-color: rgba(40, 40, 40, 0.15);
}
 .nixie-container .tube .digit.active {
	 color: #ffdb9e;
	 opacity: 1;
	 text-shadow: #ff4d00 0 0 112px, #ffa916 0 0 48px, #ef9700 0 0 24px, #ef9700 0 0 16px, #ef9700 0 0 4px;
	 -webkit-text-stroke-width: 3px;
	 -webkit-text-stroke-color: #ff6e00;
}
 @keyframes tube-glow {
	 0% {
		 box-shadow: inset -3px 4px 30px 2px rgba(255, 110, 11, 0.07), 0 -2px 32px 0 rgba(255, 169, 22, 0.06);
		 border-top: 2px solid rgba(240, 150, 150, 0.15);
		 border-right: 2px solid rgba(240, 150, 150, 0.15);
	}
	 30% {
		 box-shadow: inset -6px 4px 30px 2px rgba(255, 110, 11, 0.1), 0 -2px 32px 0 rgba(255, 169, 22, 0.06);
	}
	 55% {
		 box-shadow: inset -5px 4px 30px 2px rgba(255, 110, 11, 0.08), 0 -2px 32px 0 rgba(255, 169, 22, 0.06);
	}
	 70% {
		 box-shadow: inset -6px 4px 30px 2px rgba(255, 110, 11, 0.09), 0 -2px 32px 0 rgba(255, 169, 22, 0.06);
	}
	 78% {
		 box-shadow: inset -4px 4px 30px 2px rgba(255, 110, 11, 0.02), 0 -2px 32px 0 rgba(255, 169, 22, 0.06);
		 border-top: 2px solid rgba(240, 150, 150, 0.12);
		 border-right: 2px solid rgba(240, 150, 150, 0.12);
	}
	 85% {
		 box-shadow: inset -2px 4px 30px 2px rgba(255, 110, 11, 0.02), 0 -2px 32px 0 rgba(255, 169, 22, 0.06);
	}
	 90% {
		 box-shadow: inset 0 4px 30px 2px rgba(255, 110, 11, 0.09), 0 -2px 32px 0 rgba(255, 169, 22, 0.06);
	}
	 96% {
		 box-shadow: inset -1px 4px 30px 2px rgba(255, 110, 11, 0.01), 0 -2px 32px 0 rgba(255, 169, 22, 0.06);
	}
}
 
</style>
<link href="https://fonts.googleapis.com/css?family=Josefin+Sans" rel="stylesheet">

<!-- best viewed in Chrome -->
<section id="box-maintenance-mode" style="text-align: center;">
  <img style="max-width: 120px;" src="<?php echo document::href_link('images/logotype.png'); ?>" alt="<?php echo settings::get('store_name'); ?>" title="<?php echo settings::get('store_name'); ?>" />
  
  <h1 style="color: gray;"><?php echo language::translate('maintenance_mode:title', 'Maintenance Mode'); ?></h1>
  <p style="color: antiquewhite;"><?php echo language::translate('maintenance_mode:description', 'The site is currently in maintenance mode and we will be back shortly.'); ?></p>
</section>

<div class="nixie-container"></div>

<script>
  var MAX_DIGITS = 6;

setInterval(function () {
  
  var html = '';
  var time = (new Date()).getTime() % 4500;
  var digit, i, number;
  
  if (time < 1900 && time > 700) {
    
    $('.nixie-container').html('');

    for (i = 0; i < MAX_DIGITS; i++) {
      number = Math.floor(Math.random() * 10);
      digit = new Digit(number);
      html += digit.render();
    }
    
    $('.nixie-container').html(html);
    
    // randomise brightness when shuffling
    $('.nixie-container .digit.active').css('opacity', Math.random() - 0.2);
    
  } else if (time < 700) {
        $('.nixie-container .digit.active').css('opacity', 0.02);
  } else {
    
    // full brightness when not shuffling
    $('.nixie-container .digit.active').css('opacity', 1);
    
  }
}, 60); 

function Digit(number) {
  this.number = number || 0;
}
Digit.prototype.render = function () {
  var html = '<span class="tube">';
  for (let i = 0; i < 2; i++) {
    html += '<span class="digit ' + (i === this.number ? 'active' : '') + '">' + i + '</span>';
  }
  html += '</span>';
  return html;
};
</script>
      ]]></insert>
    </operation>
  </file>
</vmod>
